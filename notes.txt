Pseudorandom Orthogonal Transformations:

P:  is a linear operator that takes a vector and permutes its coordinates
        Find out how you use the rng_engine
        Try sequentially
        Try parallel with split

Q:  is a linear operator that takes a vector and rotates the coordinates
        When applying eq 7 do it sequentially with a loop (maybe nontrivial?)
        Also do the rotations inplace instead of using map
        Normalize the rng_engines output numbers: (rand.ToFloat/(u32.highest number).ToFloat) Then scale with 2pi

Fd: a linear operator that takes a vector uses a one to one operator to 
        transform the vector from R^d to C^(d/2) multiplies this with a 
        Fourier transform matrix and then converts the vector back to R^d 
                Play around with complex numbers
                Create a matrix-vector multiplication that works with complex numbers

Theta: takes a vector and runs it through P and Q a 'm2' times then through
        Fd and then again through P and Q m1 times
                Theta is a function that should permute all points similarly for an iteration of T


    


CENTER OF MASS OF THE COLLECTION?:
        https://www.khanacademy.org/science/physics/linear-momentum/center-of-mass/v/center-of-mass-equation
        Just add all the points and then divide the resulting vector with the number of points???
        sum = reduce (\acc point -> map2 (+) acc point ) acc points
        shiftedPoints = map (\i -> i / n) sum


How to calculate L in eq 18:
        floor of log2(N/k)

Constructing tree:
        Pad the points such that each leaf has the same number of elements. 
        Since I want the leaves to have a fixed size of a power of 2 I have 
                to pad accordingly.

        Stopping condition is when leaves have the specified size (defined points per leaf).
                Find median of first coordinate/dim with rank-k search
                Split at the median (with partition)


Find initial leaf for each point
        Save the path taken with a word of bits e.g. [1, 0, 0, 1]. This represents [+, -, -, +]
                in the paper notation.


Finding V_i...
        You have 2^L leaves with close to k points.
        for each point
                B_siqma: you have the box they belong to and its array of +,- symbols.
                        found by traversing tree
                traverse the tree and return the L leaves that have an array (+,-) that 
                        differs at only 1 index from B_sigma's array.  

        output: (close to k points) * (L + 1) candidates.

Find actual K-nn of V_i
        Look at fig 3 in propagation assisted k-d trees 



Medians: How should you handle when a column has a lot of values equal to the median? 
        A bug that could be solved when algorithm is almost finished.
        
Partition "3" from pmph used instead of native partition. 


IMPORTANT: The data that is used to build the tree is seperate from the queries you want to search!!
                That is why you need a findNaturalLeaf function for the queries! 
           I should create a new treeBuildTraverse that has this in mind!!
           This makes it so it makes sense to sort the queries in relation to their leaf number!

I should also modify the med_dims so that it goes like this e.g. [0,1,2,0,1] if d = 3 and height = 5
instead of [0,1,2,2,2] like it is now.


Do you need to pad anymore now that the data is flat? Since the shape defines how the tree looks, and it can handle 
        a node with e.g. 1 point in it by splitting it into a node with 0 points and a node with 1 point.

Also I get an error when handling a node with no points inside it.




Subtracting the center of mass of the collection of A from each point is fairly simple. The center of mass of a collection is defined by
summing up all points of the collection and then dividing by the number of points in the collection.\\
The summation can be done with vector summation since the d dimensional points can be treated as vectors.\\
Then the sum of points can be divided by the number of points inside the collection and you have the center of mass of the collection.\\
To shift the points ?towards? the center of mass just calculated you subtract the center of mass from each point with vector vector subtraction.\\



The pseudorandom orthogonal transformations 
The pseudorandom orthogonal transformations consists of 3 operators. This transformation needs to be performed on all points.
 The first operator is P which permutes the coordinates of a vector. The second operator is Q which rotates a vector. And the third Operator F is a fast discrete Fourier transform. 


Runs out of memory when k and d is too high

[szm249@futharkhpa03fl code]$ futhark dataset -b -g 10i32 -g 100i64 -g [100000][150]f32 -g [500][150]f32 > tmpdata5
[szm249@futharkhpa03fl code]$ ./knn-comparer -t time_with_k100 < tmpdata5
./knn-comparer: Failed to allocate memory in space 'device'.
Attempted allocation:   3000000000 bytes
Currently allocated:     305649351 bytes
knn-comparer.c:9688: CUDA call
  cuda_alloc(&ctx->cuda, ctx->log, (size_t) size, desc, &block->mem)
failed with error code 2 (out of memory)


DONE - Flere data punkter for runtime. fx k = 5, 15 og 30.
DONE - Prøv at gøre supercharging coaleced. Se note i knn-driver
DONE - Gør runtime grafer readable
DONE - Test også impact of size of leaves
Lav et issue, så buggen med at når k bliver for stort, så kommer der fejl.
Skriv experiment delen færdig. Beskriv dataen, maskinen, grafernes 'natur'. Derefter diskussion.


futharkhpa03fl
./knn-driver: knn-driver.c:7372: CUDA call
  cuCtxSynchronize()
failed with error code 700 (an illegal memory access was encountered)

Weird behavior upon increasing input variable. Possible bug?

Hello. (I am assuming the people fixing issues have access to the futharkhpa03fl server!) I get the following error:

./knn-driver: knn-driver.c:7372: CUDA call
  cuCtxSynchronize()
failed with error code 700 (an illegal memory access was encountered)

This happens when I increase either an input variable k or d. E.g. when k = 60 it works as intended. But increasing it to 90 creates the error.

The machine I used was futharkhpa03fl with futhark version 0.22.4 and 0.25. Both produced the same error. 
My program uses a lot of memory so futharkhpa03fl should probably be used to run it!
I attached the code. There are 2 versions since unflatten was changed in how it is called. Otherwise the 2 zip files are identical.
It can be run without issue with the following commands:

unzip IssueCodeV0.22.4.zip

cd IssueCode/

futhark cuda knn-driver.fut

futhark dataset -b -g 1i32 -g 60i64 -g [500000][50]f32 -g [500000][50]f32 > tmpdata

./knn-driver -t /dev/stdout -n < tmpdata >> res.txt


This should work (and take a little over 10 seconds). To reproduce the bug: Change the dataset to:

futhark dataset -b -g 1i32 -g 120i64 -g [500000][50]f32 -g [500000][50]f32 > tmpdata

And try to run the program as before with: ./knn-driver -t /dev/stdout -n < tmpdata >> res.txt
Here k was changed. If you change d but keep k at 60 you should get the same error. E.g. with this as the dataset:

futhark dataset -b -g 1i32 -g 60i64 -g [500000][150]f32 -g [500000][150]f32 > tmpdata


The error occurs in this part of the code (knn-driver.fut line 68-82): 

  let supercharging = 
    ----let ksqr = k**2
    let (super_knn_inds_seq) =
      loop (curr_knns_q) = (new_knns_q) for i < k do
        let k_inds = map (\knn_ind_q -> map (\q -> knn_inds_t[knn_ind_q[i],q]) (iota k)) knn_inds_q
        let k_points = map (\inds -> map (\ind -> 
                                        let test_point = map (\k_ind -> test_set[ind, k_ind]) (iota d)
                                        in (ind, test_point)
                                        ) inds) k_inds
                       --map (\inds -> map (\ind -> (ind, test_set[ind])) inds) k_inds
        in  map2 (\refs ind -> bruteForce queries[ind] curr_knns_q[ind] refs ) k_points (iota n)
    in super_knn_inds_seq

  let (super_knn_inds, _) =  unzip <| map (\i_knn -> unzip i_knn) supercharging
  in (super_knn_inds)

I tried running the program without this and it ran without errors.